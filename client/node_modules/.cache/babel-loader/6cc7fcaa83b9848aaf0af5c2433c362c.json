{"ast":null,"code":"var _jsxFileName = \"/home/matchstix/Documents/devops/Projects/currentProject/instagram_clone/client/src/components/ImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button } from \"@material-ui/core\";\nimport firebase from 'firebase';\nimport { storage, db } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageUpload({\n  username\n}) {\n  _s();\n\n  const [progress, setProgress] = useState(0);\n  const [caption, setCaption] = useState('');\n  const [imageAsFile, setImageAsFile] = useState(''); // image handler\n\n  const handleImage = e => {\n    const image = e.target.files[0];\n    setImageAsFile(imageAsFile => image);\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${imageAsFile.name}`).put(imageAsFile);\n    uploadTask.on('state_changed', snapshot => {\n      // progress function\n      const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      setProgress(progress);\n    }, err => {\n      // error catcher\n      console.log(err);\n    }, () => {\n      // Handle successful uploads on complete\n      storage.ref(\"images\").child(imageAsFile.name).getDownloadURL().then(url => {\n        // post image into db\n        db.collection(\"posts\").add({\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          caption: caption,\n          imageUrl: url,\n          username: username.then(url => {\n            this.setState({\n              url\n            });\n          })\n        }); // PROGRESS RESET\n\n        setProgress(0);\n        setCaption(\"\");\n        setImageAsFile(null);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n        value: progress,\n        max: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Description...\",\n        onChange: event => setCaption(event.target.value),\n        value: caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: this.state.url || \"https://via.placeholder.com/400x300\",\n      alt: \"Uploaded Images\",\n      height: \"300\",\n      width: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImageUpload, \"+/EYa4c2zIQNnBR13em0YE7sYHc=\");\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/home/matchstix/Documents/devops/Projects/currentProject/instagram_clone/client/src/components/ImageUpload.js"],"names":["React","useState","Button","firebase","storage","db","ImageUpload","username","progress","setProgress","caption","setCaption","imageAsFile","setImageAsFile","handleImage","e","image","target","files","handleUpload","uploadTask","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","err","console","log","child","getDownloadURL","then","url","collection","add","timestamp","firestore","FieldValue","serverTimestamp","imageUrl","setState","event","value","state"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Button} from \"@material-ui/core\";\nimport firebase from 'firebase';\nimport { storage, db } from '../firebase';\n\nfunction ImageUpload ({username})  {\n    const [progress, setProgress] = useState(0);\n    const [caption, setCaption] = useState('');\n    const [imageAsFile, setImageAsFile] = useState('')\n\n    // image handler\n    const handleImage = (e) => {\n         const image = e.target.files[0]\n         setImageAsFile(imageAsFile => (image))\n     }\n\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref(`images/${imageAsFile.name}`).put(imageAsFile);\n        \n        uploadTask.on('state_changed',\n        (snapshot) => {\n            // progress function\n            const progress = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n            );\n            setProgress(progress);\n        }, (err) => {\n            // error catcher\n            console.log(err);\n        }, () => {\n            // Handle successful uploads on complete\n            storage\n                .ref(\"images\")\n                .child(imageAsFile.name)\n                .getDownloadURL()\n                .then(url => {\n                    // post image into db\n                    db.collection(\"posts\").add({\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                        caption: caption,\n                        imageUrl: url,\n                        username: username\n                        .then(url => {\n                            this.setState({ url });\n                    })\n                })\n                \n                // PROGRESS RESET\n                setProgress(0);\n                setCaption(\"\")\n                setImageAsFile(null);\n                })\n        })\n    };\n\n    return (\n        <div>\n            <div>\n                <progress value={progress} max=\"100\" />\n                <input \n                type=\"text\" \n                placeholder=\"Description...\" \n                onChange={event => setCaption(event.target.value)}\n                value={caption} \n                />\n                {/* image input */}\n                <input type=\"file\" onChange={handleImage} />\n                <Button onClick={handleUpload}>Upload</Button>\n            </div>\n            \n            <img\n          src={this.state.url || \"https://via.placeholder.com/400x300\"}\n          alt=\"Uploaded Images\"\n          height=\"300\"\n          width=\"400\"\n        />\n\n        </div>\n    );\n\n}\n\nexport default ImageUpload"]},"metadata":{},"sourceType":"module"}