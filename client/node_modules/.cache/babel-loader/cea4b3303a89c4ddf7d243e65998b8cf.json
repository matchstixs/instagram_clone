{"ast":null,"code":"var _jsxFileName = \"/home/matchstix/Documents/devops/Projects/currentProject/instagram_clone/client/src/components/ImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button } from \"@material-ui/core\";\nimport firebase from 'firebase';\nimport { storage, db } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageUpload({\n  username\n}) {\n  _s();\n\n  const [image, setImage] = useState([0]);\n  const [progress, setProgress] = useState(0);\n  const [caption, setCaption] = useState('');\n  const allInputs = {\n    imgUrl: ''\n  };\n  const [imageAsFile, setImageAsFile] = useState('');\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\n  console.log(imageAsFile);\n\n  const handleImageAsFile = e => {\n    const image = e.target.files[0];\n    setImageAsFile(imageFile => image);\n  };\n\n  const handleChange = e => {\n    // GET FILE SELECTED\n    const image = e.target.files[0]; // SET FILE TO SELECTED\n\n    setImageAsFile(imageFile => image);\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on('state_changed', snapshot => {\n      // progress function\n      const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      console.log('Upload is ' + progress + '% done');\n      setProgress(progress); // Get task progress\n\n      switch (snapshot.state) {\n        case firebase.storage.TaskState.PAUSED:\n          // or 'paused'\n          console.log('Upload is paused');\n          break;\n\n        case firebase.storage.TaskState.RUNNING:\n          // or 'running'\n          console.log('Upload is running');\n          break;\n      }\n    }, error => {\n      // error catcher\n      console.log(error);\n    }, () => {\n      // Handle successful uploads on complete\n      storage.ref(\"images\").child(image.name).getDownloadURL().then(url => {\n        // post image into db\n        db.collection(\"posts\").add({\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          caption: caption,\n          imageUrl: url,\n          username: username\n        }); // PROGRESS RESET\n\n        setProgress(0);\n        setCaption(\"\");\n        setImage(null);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n      value: progress,\n      max: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Description...\",\n      onChange: event => setCaption(event.target.value),\n      value: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageAsFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImageUpload, \"wOhw38KlaNKnZVew4/LdSLvnpTA=\");\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/home/matchstix/Documents/devops/Projects/currentProject/instagram_clone/client/src/components/ImageUpload.js"],"names":["React","useState","Button","firebase","storage","db","ImageUpload","username","image","setImage","progress","setProgress","caption","setCaption","allInputs","imgUrl","imageAsFile","setImageAsFile","imageAsUrl","setImageAsUrl","console","log","handleImageAsFile","e","target","files","imageFile","handleChange","handleUpload","uploadTask","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","state","TaskState","PAUSED","RUNNING","error","child","getDownloadURL","then","url","collection","add","timestamp","firestore","FieldValue","serverTimestamp","imageUrl","event","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button } from \"@material-ui/core\";\nimport firebase from 'firebase';\nimport { storage, db } from '../firebase';\n\nfunction ImageUpload ({username})  {\n    const [image, setImage] = useState([0]);\n    const [progress, setProgress] = useState(0);\n    const [caption, setCaption] = useState('');\n\n    const allInputs = {imgUrl: ''}\n    const [imageAsFile, setImageAsFile] = useState('')\n    const [imageAsUrl, setImageAsUrl] = useState(allInputs)\n\n    console.log(imageAsFile)\n    const handleImageAsFile = (e) => {\n         const image = e.target.files[0]\n         setImageAsFile(imageFile => (image))\n     }\n\n    const handleChange = (e) => {\n        // GET FILE SELECTED\n        const image = (e.target.files[0])\n        // SET FILE TO SELECTED\n        setImageAsFile(imageFile => (image))\n    };\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n        uploadTask.on(\n            'state_changed',\n            (snapshot) => {\n                // progress function\n                const progress = Math.round(\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                console.log('Upload is ' + progress + '% done');\n                setProgress(progress);\n\n                // Get task progress\n                switch (snapshot.state) {\n                  case firebase.storage.TaskState.PAUSED: // or 'paused'\n                    console.log('Upload is paused');\n                    break;\n                  case firebase.storage.TaskState.RUNNING: // or 'running'\n                    console.log('Upload is running');\n                    break;\n                }\n            },\n            (error) => {\n                // error catcher\n                console.log(error);\n            },\n            () => {\n                // Handle successful uploads on complete\n                storage\n                    .ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()\n                    .then(url => {\n                        // post image into db\n                        db.collection(\"posts\").add({\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username\n                        });\n                    \n                    // PROGRESS RESET\n                    setProgress(0);\n                    setCaption(\"\")\n                    setImage(null);\n                    })\n            }\n        )\n    }\n\n    return (\n        <div>\n\n        \n        <progress value={progress} max=\"100\" />\n        <input type=\"text\" placeholder=\"Description...\" onChange={event => setCaption(event.target.value)} value={caption} />\n        <input type=\"file\" name=\"file\" onChange={handleChange} />\n        <Button onClick={handleUpload}>\n            Upload\n        </Button>\n\n\n\n        <input type=\"file\" onChange={handleImageAsFile} />\n\n        </div>\n    )\n\n}\n\nexport default ImageUpload"]},"metadata":{},"sourceType":"module"}