{"ast":null,"code":"var _jsxFileName = \"/home/matchstix/Documents/devops/Projects/currentProject/instagram_clone/client/src/components/ImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button } from \"@material-ui/core\";\nimport firebase from 'firebase';\nimport { storage, db } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageUpload({\n  username\n}) {\n  _s();\n\n  const [image, setImage] = useState(target.files[0]);\n  const [progress, setProgress] = useState(0);\n  const [caption, setCaption] = useState('');\n\n  const handleChange = e => {\n    // GET FILE SELECTED\n    if (e.target.files[0]) {\n      // SET FILE TO SELECTED\n      setImage(e.target.files(0));\n    }\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on('state_changed', snapshot => {\n      // progress function\n      const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      console.log('Upload is ' + progress + '% done');\n      setProgress(progress); // Get task progress\n\n      switch (snapshot.state) {\n        case firebase.storage.TaskState.PAUSED:\n          // or 'paused'\n          console.log('Upload is paused');\n          break;\n\n        case firebase.storage.TaskState.RUNNING:\n          // or 'running'\n          console.log('Upload is running');\n          break;\n      }\n    }, error => {\n      // error catcher\n      console.log(error);\n    }, () => {\n      // Handle successful uploads on complete\n      storage.ref(\"images\").child(image.name).getDownloadURL().then(url => {\n        // post image into db\n        db.collection(\"posts\").add({\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          caption: caption,\n          imageUrl: url,\n          username: username\n        }); // PROGRESS RESET\n\n        setProgress(0);\n        setCaption(\"\");\n        setImage(null);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n      value: progress,\n      max: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Description...\",\n      onChange: event => setCaption(event.target.value),\n      value: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImageUpload, \"SSQjOzkktV3q7k4s39lm1l56v9Q=\");\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/home/matchstix/Documents/devops/Projects/currentProject/instagram_clone/client/src/components/ImageUpload.js"],"names":["React","useState","Button","firebase","storage","db","ImageUpload","username","image","setImage","target","files","progress","setProgress","caption","setCaption","handleChange","e","handleUpload","uploadTask","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","console","log","state","TaskState","PAUSED","RUNNING","error","child","getDownloadURL","then","url","collection","add","timestamp","firestore","FieldValue","serverTimestamp","imageUrl","event","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button } from \"@material-ui/core\";\nimport firebase from 'firebase';\nimport { storage, db } from '../firebase';\n\nfunction ImageUpload ({username})  {\n    const [image, setImage] = useState(target.files[0]);\n    const [progress, setProgress] = useState(0);\n    const [caption, setCaption] = useState('');\n\n    const handleChange = (e) => {\n        // GET FILE SELECTED\n        if (e.target.files[0]) {\n            // SET FILE TO SELECTED\n            setImage(e.target.files(0));\n        }\n    };\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n        uploadTask.on(\n            'state_changed',\n            (snapshot) => {\n                // progress function\n                const progress = Math.round(\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                console.log('Upload is ' + progress + '% done');\n                setProgress(progress);\n\n                // Get task progress\n                switch (snapshot.state) {\n                  case firebase.storage.TaskState.PAUSED: // or 'paused'\n                    console.log('Upload is paused');\n                    break;\n                  case firebase.storage.TaskState.RUNNING: // or 'running'\n                    console.log('Upload is running');\n                    break;\n                }\n            },\n            (error) => {\n                // error catcher\n                console.log(error);\n            },\n            () => {\n                // Handle successful uploads on complete\n                storage\n                    .ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()\n                    .then(url => {\n                        // post image into db\n                        db.collection(\"posts\").add({\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username\n                        });\n                    \n                    // PROGRESS RESET\n                    setProgress(0);\n                    setCaption(\"\")\n                    setImage(null);\n                    })\n            }\n        )\n    }\n\n    return (\n        <div>\n\n        \n        <progress value={progress} max=\"100\" />\n        <input type=\"text\" placeholder=\"Description...\" onChange={event => setCaption(event.target.value)} value={caption} />\n        <input type=\"file\" name=\"file\" onChange={handleChange} />\n        <Button onClick={handleUpload}>\n            Upload\n        </Button>\n\n\n\n\n\n        </div>\n    )\n\n}\n\nexport default ImageUpload"]},"metadata":{},"sourceType":"module"}