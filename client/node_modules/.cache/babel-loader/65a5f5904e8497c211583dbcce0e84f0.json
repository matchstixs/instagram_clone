{"ast":null,"code":"var _jsxFileName = \"/home/matchstix/Documents/devops/Projects/currentProject/instagram_clone/client/src/components/ImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button } from \"@material-ui/core\";\nimport firebase from 'firebase';\nimport { storage, db } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageUpload({\n  username\n}) {\n  _s();\n\n  const [image, setImage] = useState([0]);\n  const [progress, setProgress] = useState(0);\n  const [caption, setCaption] = useState(''); // image handler\n\n  const handleImageAsFile = e => {\n    const image = e.target.files[0];\n    setImageAsFile(imageFile => image);\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on('state_changed', snapshot => {\n      // progress function\n      const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      console.log('Upload is ' + progress + '% done');\n      setProgress(progress); // Get task progress\n\n      switch (snapshot.state) {\n        case firebase.storage.TaskState.PAUSED:\n          // or 'paused'\n          console.log('Upload is paused');\n          break;\n\n        case firebase.storage.TaskState.RUNNING:\n          // or 'running'\n          console.log('Upload is running');\n          break;\n      }\n    }, error => {\n      // error catcher\n      console.log(error);\n    }, () => {\n      // Handle successful uploads on complete\n      storage.ref(\"images\").child(image.name).getDownloadURL().then(url => {\n        // post image into db\n        db.collection(\"posts\").add({\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          caption: caption,\n          imageUrl: url,\n          username: username\n        }); // PROGRESS RESET\n\n        setProgress(0);\n        setCaption(\"\");\n        setImage(null);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n        value: progress,\n        max: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Description...\",\n        onChange: event => setCaption(event.target.value),\n        value: caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImageAsFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImageUpload, \"puTX1Ln8gjc6fbiu1K/+n/pf39s=\");\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/home/matchstix/Documents/devops/Projects/currentProject/instagram_clone/client/src/components/ImageUpload.js"],"names":["React","useState","Button","firebase","storage","db","ImageUpload","username","image","setImage","progress","setProgress","caption","setCaption","handleImageAsFile","e","target","files","setImageAsFile","imageFile","handleUpload","uploadTask","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","console","log","state","TaskState","PAUSED","RUNNING","error","child","getDownloadURL","then","url","collection","add","timestamp","firestore","FieldValue","serverTimestamp","imageUrl","event","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Button} from \"@material-ui/core\";\nimport firebase from 'firebase';\nimport { storage, db } from '../firebase';\n\nfunction ImageUpload ({username})  {\n    const [image, setImage] = useState([0]);\n    const [progress, setProgress] = useState(0);\n    const [caption, setCaption] = useState('');\n\n\n    // image handler\n    const handleImageAsFile = (e) => {\n         const image = e.target.files[0]\n         setImageAsFile(imageFile => (image))\n     }\n\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n        uploadTask.on(\n            'state_changed',\n            (snapshot) => {\n                // progress function\n                const progress = Math.round(\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                console.log('Upload is ' + progress + '% done');\n                setProgress(progress);\n\n                // Get task progress\n                switch (snapshot.state) {\n                  case firebase.storage.TaskState.PAUSED: // or 'paused'\n                    console.log('Upload is paused');\n                    break;\n                  case firebase.storage.TaskState.RUNNING: // or 'running'\n                    console.log('Upload is running');\n                    break;\n                }\n            },\n            (error) => {\n                // error catcher\n                console.log(error);\n            },\n            () => {\n                // Handle successful uploads on complete\n                storage\n                    .ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()\n                    .then(url => {\n                        // post image into db\n                        db.collection(\"posts\").add({\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username\n                        });\n                    \n                    // PROGRESS RESET\n                    setProgress(0);\n                    setCaption(\"\")\n                    setImage(null);\n                    })\n            }\n        )\n    };\n\n    return (\n        <div>\n            <div>\n                <progress value={progress} max=\"100\" />\n                <input \n                type=\"text\" \n                placeholder=\"Description...\" \n                onChange={event => setCaption(event.target.value)}\n                value={caption} \n                />\n                {/* image input */}\n                <input type=\"file\" onChange={handleImageAsFile} />\n                <Button onClick={handleUpload}>Upload</Button>\n            </div>\n        </div>\n    );\n\n}\n\nexport default ImageUpload"]},"metadata":{},"sourceType":"module"}